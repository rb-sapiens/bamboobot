#!/usr/bin/python
# -*- coding: utf-8 -*-

#################################################################################
# MIT License

# Copyright (c) 2022 Shun Nagao

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#################################################################################

import rospy
import rospkg

from geometry_msgs.msg import PoseWithCovarianceStamped
from geometry_msgs.msg import PoseStamped
from std_msgs.msg import String
from std_msgs.msg import Int16
from move_base_msgs.msg import MoveBaseActionResult
from actionlib_msgs.msg import GoalStatus
import time
import os
import json

# global variables
goto_publisher = None
set_length_publisher = None
sequences = ""
rospack = rospkg.RosPack()
current_action = ""

def bsactuator_callback(msg):
    global current_action

    status = msg.status
    if status == 4:
        execute_action(current_action["failure"])
    if status == 3:
        execute_action(current_action["success"])

def move_action_callback(msg):
    global current_action

    status = msg.status.status
    if status == 4:
        execute_action(current_action["failure"])
    if status == 3:
        execute_action(current_action["success"])

def get_action_by_name(name):
    global sequences
    for action in sequences["actions"]:
        if name == action["name"]:
            return action
    return None

def execute_action(action_name):
    rospy.loginfo("execute "+action_name)
    global goto_publisher
    global set_length_publisher
    global current_action

    if action_name == "":
        rospy.signal_shutdown("finish sequence")

    action = get_action_by_name(action_name)
    current_action = action
    if action["command"][0] == "goto":
        goal = action["command"][1]
        goto_publisher.publish(goal)
    if action["command"][0] == "sleep":
        time.sleep(action["command"][1])
        execute_action(action["success"])
    if action["command"][0] == "set_length":
        length = action["command"][1]
        set_length_publisher.publish(length)


if __name__ == '__main__':
    rospy.init_node('sequence', log_level=rospy.DEBUG)
    sequence_path = rospy.get_param(rospy.get_name() + "/sequence_file")

    f = open(sequence_path)
    sequences = json.load(f)

    # setting subscribers
    rospy.loginfo("setting subscribers...")
    rospy.Subscriber('/move_base/result', MoveBaseActionResult, move_action_callback)
    rospy.Subscriber('/bsactuator/status', GoalStatus,bsactuator_callback)

    # setting publishers
    rospy.loginfo("setting publishers...")
    goto_publisher = rospy.Publisher("/bamboobot/goto_spot", String, queue_size=1)
    set_length_publisher = rospy.Publisher("set_length", Int16, queue_size=1)

    first_action = sequences["header"]["first_action"]
    execute_action(first_action)

    r = rospy.Rate(10)
    while not rospy.is_shutdown():
        r.sleep()
