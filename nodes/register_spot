#!/usr/bin/python
# -*- coding: utf-8 -*-

#################################################################################
# MIT License

# Copyright (c) 2022 Shun Nagao

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#################################################################################

import rospy
import rospkg

from geometry_msgs.msg import PoseWithCovarianceStamped
from geometry_msgs.msg import PoseStamped
from std_msgs.msg import String
import time
import os
import yaml

# global variables
publisher = None
current_pose = None
spot_name = ""
rospack = rospkg.RosPack()

def get_pose(msg):
    rospy.loginfo("get_pose")
    global rospack
    global current_pose
    global spot_name

    x = msg.pose.pose.position.x
    y = msg.pose.pose.position.y
    z = msg.pose.pose.position.z
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w

    current_pose = {"position":{"x":x,"y":y,"z":z}, "orientation":{"x":qx,"y":qy,"z":qz,"w":qw}}

def register(msg):
    global current_pose

    with open(rospack.get_path('bamboobot') + "/spots/" + msg.data + ".yaml", "w") as f:
        yaml.dump(current_pose,f)
    rospy.loginfo("spot was registered: " + msg.data)
    rospy.loginfo(current_pose)


if __name__ == '__main__':
    rospy.init_node('register_spot', log_level=rospy.DEBUG)

    # registering a spot
    rospy.loginfo("registering a spot...")
    rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, get_pose)
    rospy.Subscriber('/bamboobot/register_spot', String, register)

    r = rospy.Rate(10)
    while not rospy.is_shutdown():
        r.sleep()
